# JUnit tests

snippet beach
	@BeforeEach
	void beforeEach() {
		${1}
	}

snippet aeach
	@AfterEach
	void afterEach() {
		${1}
	}

snippet given
	given(${1}).willReturn(${2});

snippet then
	then(${1}).should().${2}

snippet mock
	${1} ${2} = mock(${1}.class);

snippet nested
	@Nested
	class ${1}Test {
		${2}
	}

snippet test
	@Test
	@DisplayName("""
			Given ${1},
			 when ${2},
			 then ${3}.
			""")
	void ${4}() {
		// GIVEN
		${5}

		// WHEN

		// THEN
	}

snippet testmethodsource
	private static Stream<Arguments> ${1}Provider() {
		return Stream.of(
			Arguments.of(
				"${2}",
				)
		);
	}

snippet ath
	${1} actual = assertThrows(${1}.class, () -> ${2});

snippet prsf
	private static final ${1};

snippet testpojo
	@Test
	@DisplayName("""
		Given correct arguments,
		 when creating new ${1:`vim_snippets#Filename("$1", "untitled)"`},
		 then do not throw exception
		""")
	void correctArguments() {
		assertDoesNotThrow(() -> new ${1}(${2}));
	}

	@ParameterizedTest(name = "{0}")
	@MethodSource("invalidArgumentsProvider")
	@DisplayName("""
		Given incorrect arguments,
		 when creating new ${1},
		 then throw exception
		""")
	void incorrectArguments(
		String desc,
		String arg,
		String expectedErrorMessage
	) {
		IllegalArgumentException actual = assertThrows(
			IllegalArgumentException.class,
			() -> new ${1}(arg),
			desc
		);

		assertEquals(expectedErrorMessage, actual.getMessage());
	}

	private static Stream<Arguments> invalidArgumentsProvider() {
		return Stream.of(
			Arguments.of(
				"null ",
				null,
				" is mandatory."
			)
		);
	}

snippet ae
	assertEquals(${1:expected}, ${2:actual});

snippet at
	assertTrue(${1:actual});

snippet af
	assertFalse(${1:actual});

