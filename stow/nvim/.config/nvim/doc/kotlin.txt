*kotlin.txt*                                                  Kotlin cheatsheet

Kotlin Quick Reference Guide
===============================================================================

This file provides a concise reference for Kotlin syntax and features.

SOURCES~
    https://github.com/alidehkhodaei/kotlin-cheat-sheet
    https://devhints.io/kotlin
    https://quickref.me/kotlin.html

TABLE OF CONTENTS~
    1.  |kotlin-data-types|               Data Types
    2.  |kotlin-data-conversion|          Data Conversion
    3.  |kotlin-string-interpolation|     String Interpolation
    4.  |kotlin-bitwise-operators|        Bitwise Operators
    5.  |kotlin-control-flow|             Control Flow
        |kotlin-if-else|                    If/Else
        |kotlin-when|                       When
        |kotlin-for|                        For Loops & Ranges
        |kotlin-while|                      While/Do-While
        |kotlin-exception|                  Exception Handling
    6.  |kotlin-nothing|                  Nothing Type
    7.  |kotlin-functions|                Functions
        |kotlin-function-declaration|       Function Declaration
        |kotlin-function-default-named|     Default & Named Arguments
        |kotlin-function-return-type|       Return Types
        |kotlin-function-unit|              Unit-returning Functions
        |kotlin-function-local|             Local Functions
        |kotlin-function-generic|           Generic Functions
        |kotlin-function-lambda|            Lambda Expressions
        |kotlin-function-extension|         Extension Functions & Properties
        |kotlin-function-higher-order|      Higher-Order Functions
        |kotlin-function-operator|          Operator Overloading
        |kotlin-function-varargs|           Varargs
        |kotlin-function-infix|             Infix Notation
        |kotlin-function-scope|             Scope Functions
    8.  |kotlin-classes|                  Classes & Objects
        |kotlin-class|                      Class
        |kotlin-property-method|            Properties & Methods
        |kotlin-getter-setter|              Getters & Setters
        |kotlin-visibility|                 Visibility Modifiers
        |kotlin-lateinit|                   Lateinit
        |kotlin-inheritance|                Inheritance
        |kotlin-interface-abstract|         Interface & Abstract
        |kotlin-data-class|                 Data Class
        |kotlin-nested-inner|               Nested & Inner Class
        |kotlin-typealias|                  Typealias
        |kotlin-enum|                       Enum
        |kotlin-sealed|                     Sealed Class
        |kotlin-generic|                    Generic Class
        |kotlin-delegation|                 Delegation
        |kotlin-delegated-properties|       Delegated Properties
    9.  |kotlin-collections|              Collections
        |kotlin-array|                      Array
        |kotlin-list|                       List
        |kotlin-map|                        Map
        |kotlin-set|                        Set
   10.  |kotlin-other|                    Other Topics
        |kotlin-destructuring|              Destructuring Declarations
        |kotlin-reflection|                 Reflection
        |kotlin-annotations|                Annotations
        |kotlin-packages-imports|           Packages & Imports
        |kotlin-null-safety|                Null Safety
        |kotlin-equality|                   Equality
        |kotlin-comparable|                 Comparable
        |kotlin-regex|                      Regex

===============================================================================
DATA TYPES                                                   *kotlin-data-types*

Primitive and basic types in Kotlin:
>kotlin
    val booleanVar: Boolean = true
    val byteVar: Byte = 127
    val shortVar: Short = 32767
    val intVar: Int = 2147483647
    val longVar: Long = 9223372036854775807L
    val floatVar: Float = 3.14f
    val doubleVar: Double = 3.14159265358979323846
    val charVar: Char = 'A'
    val stringVar: String = "Hello, world!"
<

===============================================================================
DATA CONVERSION                                         *kotlin-data-conversion*

Convert between types:
>kotlin
    val str: String = "123"
    val num: Int = str.toInt() // String to Int

    val dbl: Double = 123.45
    val int: Int = dbl.toInt() // Double to Int

    val lng: Long = 9876543210
    val flt: Float = lng.toFloat() // Long to Float

    val bol: Boolean = true
    val strBol: String = bol.toString() // Boolean to String

    val char: Char = 'A'
    val intChar: Int = char.code // Char to Int (use .code)
    // Conversion of Char to Number is deprecated. Use Char.code property instead.

    val byte: Byte = 127
    val short: Short = byte.toShort() // Byte to Short
<

===============================================================================
STRING INTERPOLATION                               *kotlin-string-interpolation*

Embed variables in strings:
>kotlin
    val name = "Ali"
    val result = "My name is $name"
<

===============================================================================
BITWISE OPERATORS                                     *kotlin-bitwise-operators*

Bitwise operations:
>kotlin
    val k = 0b1010
    val l = 0b1100
    println(k and l) // Prints "8" (0b1000)
    println(k or l)  // Prints "14" (0b1110)
    println(k xor l) // Prints "6" (0b0110)
<

===============================================================================
CONTROL FLOW                                               *kotlin-control-flow*

Conditional and loop constructs.

-------------------------------------------------------------------------------
IF / ELSE                                                      *kotlin-if-else*
>kotlin
    if (condition) {
        // Code to execute if condition is true
    } else {
        // Code to execute if condition is false
    }
<

-------------------------------------------------------------------------------
WHEN                                                              *kotlin-when*
>kotlin
    when (value) {
        condition1 -> // Code to execute if value matches condition1
        condition2 -> // Code to execute if value matches condition2
        else -> // Code to execute if value does not match any condition
    }

    // As expression
    val seasonFirstMonth = when(season) {
        "summer" -> 6
        "winter" -> 12
        "automn" -> 9
        "spring" -> 3
        else -> error("There is only 4 seasons")
    }

    // Ternary-like
    val max = if (a > b) a else b // Similar to ternary operator
<

-------------------------------------------------------------------------------
FOR LOOPS & RANGES                                                 *kotlin-for*
>kotlin
    for (item in collection) {
        // Code to execute for each item in collection
    }
    for (i in 1..10) {
        if (i == 5) break // Exit loop when i is equal to 5
        if (i % 2 == 0) continue // Skip even numbers and continue to the next iteration
        // Code to execute for each odd number between 1 and 10
    }

    // Ranges
    for(i in 0..3) {             
        print(i)
    }
    for(i in 0 until 3) {       
        print(i)
    }
    for(i in 2..8 step 2) {     
        print(i)
    }
    for (i in 3 downTo 0) {     
        print(i)
    }
    for (c in 'a'..'d') {   
        print(c)
    }

    // Range in if
    if (x in 1..5) {           
        print("x is in range from 1 to 5")
    }
<

-------------------------------------------------------------------------------
WHILE / DO-WHILE                                                 *kotlin-while*
>kotlin
    while (condition) {
        // Code to execute as long as condition is true
    }
    do {
        // Code to execute at least once
    } while (condition)
<

-------------------------------------------------------------------------------
EXCEPTION HANDLING                                           *kotlin-exception*
>kotlin
    try {
        // some code
    } catch (e: SomeException) {
        // handler
    } finally {
        // optional finally block
    }
<

===============================================================================
NOTHING                                                         *kotlin-nothing*

The `Nothing` type marks code locations that can never be reached (e.g.,
functions that always throw):
>kotlin
    fun fail(message: String): Nothing {
        throw IllegalArgumentException(message)
        // This function never returns
    }
<

===============================================================================
FUNCTIONS                                                    *kotlin-functions*

-------------------------------------------------------------------------------
FUNCTION DECLARATION                              *kotlin-function-declaration*

Functions are declared with the `fun` keyword.
>kotlin
    fun sayHello() {
        println("Hello!")
        // Prints Hello!
    }
    fun greet(name: String) {
        println("Hello, $name!")
        // Prints Hello, <name>!
    }
<

-------------------------------------------------------------------------------
DEFAULT AND NAMED ARGUMENTS                     *kotlin-function-default-named*

Functions can have default values and named arguments.
>kotlin
    fun greet(name: String = "World", greeting: String = "Hello") {
        println("$greeting, $name!")
        // Prints greeting and name
    }
    fun main() {
        // calling function with default arguments
        greet() // output: Hello, World!
    
        // calling function with named arguments
        greet(greeting = "Hi", name = "Ali") // output: Hi, Ali!
    
        // calling function with some named arguments
        greet(name = "Reza") // output: Hello, Reza!
    }
<

-------------------------------------------------------------------------------
RETURN TYPES                                      *kotlin-function-return-type*

Specify return types after the parameter list.
>kotlin
    fun add(a: Int, b: Int): Int {
        return a + b
        // Returns the sum
    }
    fun multiply(a: Int, b: Int) = a * b
    // Returns the product
<

-------------------------------------------------------------------------------
UNIT-RETURNING FUNCTIONS                                 *kotlin-function-unit*

Functions returning `Unit` (like `void` in other languages).
>kotlin
    fun printHello(): Unit {
        print("Hello")
        // Prints Hello
    }
<

-------------------------------------------------------------------------------
LOCAL FUNCTIONS                                         *kotlin-function-local*

Functions can be declared inside other functions.
>kotlin
    fun main() {
        fun printMessage(message: String) {
            println("Message: $message")
            // Prints the message
        }
    
        printMessage("Hello, world!")
    }
<

-------------------------------------------------------------------------------
GENERIC FUNCTIONS                                     *kotlin-function-generic*

Functions can be generic.
>kotlin
    fun <T> function(item: T) {
        // ...
    }
<

-------------------------------------------------------------------------------
LAMBDA EXPRESSIONS                                     *kotlin-function-lambda*

Anonymous functions (lambdas) can be assigned to variables.
>kotlin
    val sum = { a: Int, b: Int -> a + b }
    // Lambda that adds two numbers
    val sum = { a: Int, b: Int -> a + b }
    // Lambda that squares a number
    val square: (Int) -> Int = { it * it }
<

-------------------------------------------------------------------------------
EXTENSION FUNCTIONS & PROPERTIES                    *kotlin-function-extension*

Add new functions or properties to existing types.
>kotlin
    fun String.reverse(): String {
        return this.reversed()
    }

    val String.firstChar: Char
        get() = this[0]

    fun main() {
        val str = "Ali"
        println(str.reverse())  // Prints "ilA"
        println(str.firstChar)  // Prints "A"
    }
<

-------------------------------------------------------------------------------
HIGHER-ORDER FUNCTIONS                           *kotlin-function-higher-order*

A higher-order function is a function that takes another function as parameter
and/or returns a function.

Taking Functions as Parameters

>kotlin
    fun calculate(x: Int, y: Int, operation: (Int, Int) -> Int): Int {
        return operation(x, y)
    }
    fun sum(x: Int, y: Int) = x + y
    // Function to sum two numbers
    fun main() {
        val sumResult = calculate(1, 7, ::sum)
        val mulResult = calculate(1, 7) { a, b -> a * b }
    }
<

Returning Functions

>kotlin
    fun operation(): (Int) -> Int {
        return ::square
        // Returns a function
    }
    fun square(x: Int) = x * x
    // Squares a number
    fun main() {
        val func = operation()
        println(func(7))
    }
<

-------------------------------------------------------------------------------
OPERATOR OVERLOADING                                 *kotlin-function-operator*

Operator overloading in Kotlin allows you to define and use custom operators for your own classes and types.
>kotlin
    data class Point(val x: Int, val y: Int) {
        operator fun plus(other: Point): Point {
            return Point(x + other.x, y + other.y)
            // Overloads the + operator
        }
    }
    fun main() {
        val p1 = Point(1, 2)
        val p2 = Point(3, 4)
        val p3 = p1 + p2 // using the overloaded '+' operator
        println(p3) // Output: Point(x=4, y=6)
    }
<

-------------------------------------------------------------------------------
VARARGS (VARIABLE NUMBER OF ARGUMENTS)                *kotlin-function-varargs*

Varargs is a feature that allows you to pass a variable number of arguments of
the same type to a function.

>kotlin
    fun printNumbers(vararg numbers: Int) {
        for (number in numbers) {
            println(number)
            // Prints each number
        }
    }
    fun main() {
        printNumbers(1, 2, 3) // prints 1, 2, 3
        printNumbers(4, 5, 6, 7, 8) // prints 4, 5, 6, 7, 8
    }
<

-------------------------------------------------------------------------------
INFIX NOTATION                                          *kotlin-function-infix*

Infix in Kotlin allows you to define functions that can be called using infix
notation (i.e., without using parentheses and the dot notation).
>kotlin
    infix fun Int.times(str: String) = str.repeat(this)

    fun main() {
        val str = 5 times "Hello "
        println(str) // Output: "Hello Hello Hello Hello Hello "
    }
<

-------------------------------------------------------------------------------
SCOPE FUNCTIONS                                         *kotlin-function-scope*

Kotlin provides several scope functions: let, run, with, apply, also.

`let` can be used for scoping and null-checks. When called on an object, let
executes the given block of code and returns the result of its last
expression. The object is accessible inside the block by the reference it (by
default) or a custom name.

>kotlin
    val message: String? = "Hello"
    message?.let {
        print(it.toUpperCase())
    }
<

Like `let`, `run` is another scoping function from the standard library.
Basically, it does the same: executes a code block and returns its result. The
difference is that inside run the object is accessed by this. This is useful
when you want to call the object's methods rather than pass it as an argument.

>kotlin
    val message: String? = "Hello"
    message?.run {
        print(this.toUpperCase())
    }
<

`with` is a non-extension function that can access members of its argument
concisely: you can omit the instance name when referring to its members.

>kotlin
    val person = Person("Ali", 24)
    val message = with(person) {
        "My name is $name and I'm $age years old."
    }
<

`apply` executes a block of code on an object and returns the object itself.
Inside the block, the object is referenced by this. This function is handy for
initializing objects.

>kotlin
    val person = Person("Ali", 24)
    person.apply {
        name = "Ali"
        age = 24
    }
<

`also` works like apply: it executes a given block and returns the object
called. Inside the block, the object is referenced by it, so it's easier to
pass it as an argument. This function is handy for embedding additional
actions, such as logging in call chains.

>kotlin
    val message: String? = "Hello"
    message?.also {
        print(it.toUpperCase())
    }
<

-------------------------------------------------------------------------------
CLASSES AND OBJECTS                                              *kotlin-class*

A class is a blueprint for creating objects. An object is an instance of a class.
>kotlin
    class Person(val name: String, var age: Int) // class
    val person = Person("Ali", 24) // object
<

-------------------------------------------------------------------------------
PROPERTIES AND METHODS                                 *kotlin-property-method*

Properties are variables that are part of a class/object. Methods are
functions that are part of a class/object.
>kotlin
    class Person(val name: String) {
        var age = 0 // property
        fun sayHello() { // method
            println("Hello, my name is $name")
        }
    }
    val person = Person("Ali")
    person.age = 24
    person.sayHello()
<

-------------------------------------------------------------------------------
GETTERS AND SETTERS                                      *kotlin-getter-setter*

Getters and setters are accessors used to retrieve and modify the value of a variable.
>kotlin
    class Person {
        var name: String = ""
            get() = field.uppercase()
            set(value) {
                field = "Name: $value"
            }
        var age = 24 // has default getter and setter
        val username = "Ali" // has default getter
    }
<

-------------------------------------------------------------------------------
VISIBILITY MODIFIERS                                        *kotlin-visibility*

- private: restricts visibility to the same class.
- protected: restricts visibility to the same class and its subclasses.
- internal: restricts visibility to the same module.
- public: allows visibility from anywhere.

-------------------------------------------------------------------------------
LATEINIT                                                      *kotlin-lateinit*

`lateinit` is used for variables that will be initialized later.
>kotlin
    lateinit var myLateInitVar: String
    // The variable is not initialized yet, so trying to access it will throw an exception
    // println(myLateInitVar) // This line would throw a "lateinit property has not been initialized" exception

    // Sometime later, the variable is initialized
    myLateInitVar = "Hello World"

    // Now we can access the variable without an exception
    println(myLateInitVar) // Prints "Hello World"
<

-------------------------------------------------------------------------------
INHERITANCE                                                *kotlin-inheritance*
>kotlin
    open class Animal(val name: String) {
        open fun makeSound() {
            println("Animal sound")
        }
    }
    class Dog(name: String): Animal(name) {
        override fun makeSound() {
            println("Woof!")
        }
    }
<

-------------------------------------------------------------------------------
INTERFACE AND ABSTRACT                              *kotlin-interface-abstract*
>kotlin
    interface Vehicle {
        fun start()
        fun stop()
        val name: String
    }
    abstract class Animal {
        abstract fun makeSound()
        open fun move() {
            println("Moving...")
        }
    }
<

-------------------------------------------------------------------------------
DATA CLASS                                                  *kotlin-data-class*
>kotlin
    data class Person(val name: String, var age: Int)
    val person = Person("Ali", 24)
<

-------------------------------------------------------------------------------
NESTED AND INNER CLASS                                    *kotlin-nested-inner*
>kotlin
    class Outer {
        private val outerProperty = "Outer property"

        class Nested {
            fun foo() {
                // can't access outerProperty
            }
        }
    
        inner class Inner {
            fun bar() {
                println(outerProperty) // can access outerProperty
            }
        }
    }
<

-------------------------------------------------------------------------------
TYPEALIAS                                                    *kotlin-typealias*

>kotlin
    typealias NumberPredicate = (Int) -> Boolean
    typealias NumberMapper = (Int) -> String
    val numbers = listOf(1, 2, 3, 4, 5)
    val even: NumberPredicate = { number -> number % 2 == 0 }
    val mapper: NumberMapper = { number -> "Number is $number" }
    numbers.filter(even).map(mapper)
<

-------------------------------------------------------------------------------
ENUM                                                              *kotlin-enum*

>kotlin
    enum class Color {
        RED, GREEN, BLUE
    }
<

-------------------------------------------------------------------------------
SEALED CLASS                                                    *kotlin-sealed*

>kotlin
    sealed class Shape
    class Circle: Shape()
<

-------------------------------------------------------------------------------
GENERIC CLASS                                                  *kotlin-generic*
>kotlin
    class Box<T>(t: T) {
        var value = t
    }
<

-------------------------------------------------------------------------------
DELEGATION                                                  *kotlin-delegation*
>kotlin
    interface Base {
        fun print()
    }

    class BaseImpl(val x: Int) : Base {
        override fun print() { print(x) }
    }

    class Derived(b: Base) : Base by b

    fun main() {
        val b = BaseImpl(10)
        Derived(b).print()
    }
<


-------------------------------------------------------------------------------
DELEGATED PROPERTIES                              *kotlin-delegated-properties*

>kotlin
    val myLazyVar: String by lazy {
        "Hello World"
    }
    println(myLazyVar)
<

===============================================================================
COLLECTIONS                                                 *kotlin-collections*


-------------------------------------------------------------------------------
ARRAY                                                            *kotlin-array*

>kotlin
    val numbers = arrayOf(1, 2, 3, 4, 5)
    numbers[0] = 10
    // Declare an array of integers
    val numbers = arrayOf(1, 2, 3, 4, 5)
    // Declare an array of strings
    val names = arrayOf("Alice", "Bob", "Charlie", "Dave")
    // Declare an array of a specific size
    val array = arrayOfNulls<Int>(10)
    // Declare an array of integers with a specified size and initial value
    val array2 = Array<Int>(7) { i -> i*i }
    val filledArray = IntArray(5) { index -> index * 2 } // Other type: BooleanArray, ShortArray, DoubleArray and etc.
    // Access an element at a specific index
    val firstNumber = numbers[0]
    // Access the last element of an array
    val lastNumber = numbers[numbers.size - 1]
    // Modify an element at a specific index
    numbers[0] = 10
    // Sort the array
    numbers.sort()
    // Reverse the array
    names.reverse()
<

-------------------------------------------------------------------------------
LIST                                                              *kotlin-list*
>kotlin
    val list = listOf(1, 2, 3, 4, 5)
    numbers.add(4)
    numbers.remove(3)
    numbers[1]
val list2 = mutableListOf(1, 2, 3, 4, 5)
val numbers = mutableListOf(1, 2, 3)
numbers.add(4) // Adds the specified element to the end of the list
numbers.remove(3) // Removes the first occurrence of the specified element from the list
numbers[1] // Returns the element at the specified index in the list
<

-------------------------------------------------------------------------------
MAP                                                                *kotlin-map*
>kotlin
    val map = mapOf(1 to "one", 2 to "two", 3 to "three")
	val numbers = mutableMapOf("one" to 1, "two" to 2, "three" to 3)
	numbers.put("four", 4) // Associates the specified value with the specified key in the map
	numbers.remove("two") // Removes the mapping for the specified key from the map if it is present
	numbers.containsKey("two") // Returns true if the map contains the specified key
<

-------------------------------------------------------------------------------
SET                                                                *kotlin-set*
>kotlin
    val set = setOf(1, 2, 3, 4, 5)
	val set2 = mutableSetOf(1, 2, 3, 4, 5)
	val numbers = mutableSetOf(1, 2, 3)
	numbers.add(4) // Adds the specified element to the set if it is not already present
	numbers.remove(3) // Removes the specified element from the set if it is present
	numbers.contains(1) //  Returns true if the set contains the specified element
<

===============================================================================
OTHER TOPICS                                                     *kotlin-other*

-------------------------------------------------------------------------------
DESTRUCTURING DECLARATIONS                               *kotlin-destructuring*

>kotlin
    val person = Person("Ali",24)
    val (name, age) = person // Destructuring declaration
<

-------------------------------------------------------------------------------
REFLECTION                                                  *kotlin-reflection*

>kotlin
    val stringClass = String::class.java
    // Obtain a Class object for the String class
    val stringClass = String::class.java
    // Get the fields of the String class and print their names
    val fields = stringClass.declaredFields
    for (field in fields) {
        println(field.name)
    }
    // Get the methods of the String class and print their names
    val methods = stringClass.declaredMethods
    for (method in methods) {
        println(method.name)
    }
<

-------------------------------------------------------------------------------
ANNOTATIONS                                                *kotlin-annotations*

>kotlin
    @Deprecated("Use newMethod() instead", ReplaceWith("newMethod()"))
    fun oldMethod() {
        // ...
    }
<

-------------------------------------------------------------------------------
PACKAGES AND IMPORTS                                  *kotlin-packages-imports*

>kotlin
    package com.example.models

    class Person(val name: String, val age: Int)
<

>kotlin
    import com.example.models.Person

    fun main() {
        val person = Person("Ali", 24)
        println("Name: ${person.name}, Age: ${person.age}")
    }
<

-------------------------------------------------------------------------------
NULL SAFETY                                                *kotlin-null-safety*

>kotlin
    var nullableStr: String? = null
    var nonNullStr: String = "Hello"
    
    // safe call operator
    println(nullableStr?.length) // prints null
    
    // elvis operator
    val len = nullableStr?.length ?: -1
    println(len) // prints -1
    
    // not-null assertion operator
    // throws null pointer exceptions because nullableStr is null
    // println(nullableStr!!.length)
    
    // this would not compile because nonNullStr is not nullable
    // nonNullStr = null
<

-------------------------------------------------------------------------------
EQUALITY                                                      *kotlin-equality*


In Kotlin there are two types of equality:

- Structural equality (`==` - a check for equals())
- Referential equality (`===` - two references point to the same object)

>kotlin
    data class Person(val name:String,val age:Int)

    val person1=Person("Ali",24)
    val person2=Person("Reza",27)
    var person3=Person("Ali",24)

    print(person1 == person2) // false
    print(person1 != person2) // true
    print(person1 === person2) // false
    print(person1 == person3) // true
    print(person1 === person3) // false
    print(person1 !== person3) // true
<

- The `==` operator in Kotlin is equivalent to calling the `equals()` method.
- Data classes generate an `equals()` method based on their properties, but
  regular classes do not.
- To compare objects for equality based on their contents, you need to
  override the `equals()` method for regular classes.

-------------------------------------------------------------------------------
COMPARABLE                                                  *kotlin-comparable*
>kotlin
    data class Person(val name: String, val age: Int) : Comparable<Person> {
        override fun compareTo(other: Person): Int {
            return this.age.compareTo(other.age)
        }
    }

    val person1 = Person("Ali", 24)
    val person2 = Person("Reza", 30)

	// you can directly use the `<` and `>` operators
    if (person1 < person2) {
        println("${person1.name} is younger than ${person2.name}")
    } else {
        println("${person1.name} is older than ${person2.name}")
    }

    val people = listOf(
        Person("Ali", 24),
        Person("Reza", 40),
        Person("Shabnam", 23)
    )

	// When you use the sorted() or sort() function to sort a list of objects,
	// Kotlin uses the compareTo() method of the objects to determine their
	// natural order. If the objects in the list do not implement the
	// Comparable interface, you will get a compile-time error.
    val sortedPeople = people.sorted()
    println(sortedPeople) // [Person(name=Shabnam, age=23), Person(name=Ali, age=24), Person(name=Reza, age=40)]
<

-------------------------------------------------------------------------------
REGEX                                                            *kotlin-regex*

Regex, short for regular expression, is a sequence of characters that forms a
pattern used to match and manipulate text.

Regex Basics:

- `.`     Matches any character except newline.
- `^`     Matches the start of a string, or start of line in multi-line pattern.
- `\A`    Matches the start of a string.
- `$`     Matches the end of a string, or end of line in multi-line pattern.
- `\Z`    Matches the end of a string.
- `\b`    Matches a word boundary.
- `\B`    Matches a position that is not a word boundary.
- `\d`    Matches a digit (0-9).
- `\D`    Matches a non-digit.
- `\w`    Matches a word character (letter, digit, or underscore).
- `\W`    Matches a non-word character.
- `\s`    Matches a whitespace character (space, tab, newline, etc.).
- `\S`    Matches a non-whitespace character.
- `()`    Groups
- `[]`    Matches any character inside the square brackets.
- `[^]`   Matches any character not inside the square brackets.
- `*`     Matches 0 or more of the preceding element.
- `+`     Matches 1 or more of the preceding element.
- `?`     Matches 0 or 1 of the preceding element.
- `{n}`   Matches exactly n occurrences of the preceding element.
- `{n,}`  Matches n or more occurrences of the preceding element.
- `{n,m}` Matches between n and m occurrences of the preceding element.

Kotlin provides several functions for working with regular expressions, including: matches, find, findAll, replace, split and etc.

>kotlin
    val phoneNumber = "9112233445"
    val regex = Regex("^\\d{10}$")
    println(regex.matches(phoneNumber)) // true
<

vim:ft=help:tw=78:ts=4:noet:norl:
