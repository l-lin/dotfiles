*lua.txt*                                                  Lua cheatsheet

Lua Quick Reference Guide
===============================================================================

This file provides a concise reference for Lua syntax and features.

SOURCES~
    https://www.lua.org/manual/5.1/manual.html
    https://learnxinyminutes.com/docs/lua/
    https://devhints.io/lua
    https://www.youtube.com/watch?v=CuWfgiwI73Q

TABLE OF CONTENTS~
    1. |lua-variables|         Variables & Data Types
    2. |lua-tables|            Tables (Lists & Maps)
    3. |lua-functions|         Functions
    4. |lua-control-flow|      Control Flow
       |lua-if-else|           If/Else
       |lua-loops|             Loops
    5. |lua-modules|           Modules
    6. |lua-metatable|         Metatables

===============================================================================
VARIABLES & DATA TYPES                                         *lua-variables*

Basic variable types in Lua:
>lua
    local number = 5
    local str = "hello, world"
    local another_str = 'also works'
    local multi_line = [[ This is
      multi line and literal ]]
    local truth, lies = true, false
    local nothing = nil
<

===============================================================================
TABLES (LISTS & MAPS)                                            *lua-tables*

Tables are Lua's only data structure, used for both lists and maps.

>lua
    -- as list
    local list = { "first", 2, false, function() print("Fourth!") end }
    print("It's 1-indexed: ", list[1])
    print("Fourth is 4...", list[4]())

    -- as map
    local m = {
      literal_key = "a string",
      ["an expression"] = "also works",
      [function() end] = true,
    }
    print("literal key: ", m.literal_key)
    print("an expression: ", m["an expression"])
    -- prints nothing because they are different functions
    print("function: ", m[function() end])
<

===============================================================================
FUNCTIONS                                                    *lua-functions*

Functions can be declared in several ways and can return multiple values.

>lua
    -- how to declare a new function
    local function hello(name)
      print("Hello!", name)
    end

    -- or like this
    local greet = function(name)
      -- .. is string concatenation
      print("Greeting, " .. name .. "!")
    end

    -- functions can return multiple values
    local returns_four_values = function()
      return 1, 2, 3, 4
    end
    first, second, last = returns_four_values()
    -- the `4` is discarded

    -- variadic arguments
    local variable_arguments = function(...)
      local arguments = { ... }
      for i, v in ipairs({ ... }) do
        print(i, v)
      end
      return unpack(arguments)
    end
    print("1:", variable_arguments("hello", "world", "!"))
    print("2:", variable_arguments("hello", "world", "!"), "<lost>")

    -- colon functions (method syntax)
    local MyTable = {}
    function MyTable:something(...) end
    -- syntactic sugar for:
    function MyTable.something(self, ...) end
<

===============================================================================
CONTROL FLOW                                               *lua-control-flow*

Conditional and loop constructs.

-------------------------------------------------------------------------------
IF / ELSE                                                      *lua-if-else*
>lua
    local function foobar(flag)
      if flag then
        print("This is true")
      else
        print("This is false")
      end
    end

    -- falsey: nil, false
    foobar()
    foobar(nil)
    foobar(false)

    -- truthy: everything else
    foobar(true)
    foobar(0)
    foobar({})
<

-------------------------------------------------------------------------------
LOOPS                                                          *lua-loops*
>lua
    -- loop over list
    local arr = { "foo", "bar" }
    for index = 1, #arr do
      print(index, arr[index])
    end
    for index, value in ipairs(arr) do
      print(index, value)
    end

    -- loop over map
    local m = { foo = "bar", another_field = 123 }
    for key, value in pairs(m) do
      print(key, value)
    end
<

===============================================================================
MODULES                                                        *lua-modules*

Modules are just files that return a table.

>lua
    -- foo.lua
    local M = {}
    M.cool_function = function() end
    return M

    -- bar.lua
    local foo = require("foo")
    foo.cool_function()
<

===============================================================================
METATABLES                                                    *lua-metatable*

Metatables allow you to change the behavior of tables (operator overloading, etc).

>lua
    -- redefine add operation on table
    local vector_mt = {}
    vector_mt.__add = function(left, right)
      return setmetatable({
        left[1] + right[1],
        left[2] + right[2],
        left[3] + right[3],
      }, vector_mt)
    end
    local v1 = setmetatable({ 3, 1, 5 }, vector_mt)
    local v2 = setmetatable({ -3, 2, 2 }, vector_mt)
    local v3 = v1 + v2
    print(v3[1], v3[2], v3[3]) -- 0 3 7
    print(v3 + v3) -- { 0, 6, 14 }

    -- redefine index operation
    local fib_mt = {
      __index = function(self, key)
        if key < 2 then return 1 end
        self[key] = self[key - 2] + self[key - 1]
        return self[key]
      end
    }
    local fib = setmetatable({}, fib_mt)
    print(fib[5])
    print(fib[1000])

    -- other notable fields:
    -- `__newindex(self, key, value)`
    -- `__call(self, ...)`
<

vim:ft=help:tw=78:ts=4:noet:norl:
