# JUnit tests

snippet beach
	@BeforeEach
	void beforeEach() {
		${1}
	}

snippet aeach
	@AfterEach
	void afterEach() {
		${1}
	}

snippet given
	given(${1}).willReturn(${2});

snippet then
	then(${1}).should().${2};

snippet mock
	${1} ${2} = mock(${1}.class);

snippet nested
	@Nested
	class ${1}Test {
		${2}
	}

snippet test
	@Test
	@DisplayName("""
			Given ${1},
			 when ${2},
			 then ${3}.
			""")
	void ${4}() {
		// GIVEN
		${5}

		// WHEN

		// THEN
	}

snippet tabletest
	@ParameterizedTest(name = """
			Given {0},
			 when ${1},
			 then ${2}.
			""")
	@MethodSource("${3}Provider")
	void ${4}() {
		// GIVEN
		${6}

		// WHEN

		// THEN
	}

	private static Stream<Arguments> ${3}Provider() {
		return Stream.of(
			Arguments.of(
				"${5}",
				)
		);
	}


snippet testmethodsource
	private static Stream<Arguments> ${1}Provider() {
		return Stream.of(
			Arguments.of(
				"${2}",
				)
		);
	}

snippet ath
	${1} actual = assertThrows(${1}.class, () -> ${2});

snippet prsf
	private static final ${1};

snippet pf
	private final ${1};

snippet testpojo
	@Test
	@DisplayName("""
		Given correct arguments,
		 when creating new ${1:`vim_snippets#Filename("$1", "untitled)"`},
		 then do not throw exception.
		""")
	void correctArguments() {
		// GIVEN
    ThrowingSupplier<${1}> supplier = () -> new ${1}(${2});

    // WHEN
    var actual = assertDoesNotThrow(supplier);

    // THEN
    assertThat(actual).isNotNull();
	}

	@ParameterizedTest(name = "{0}")
	@MethodSource("invalidArgumentsProvider")
	@DisplayName("""
		Given incorrect arguments,
		 when creating new ${1},
		 then throw exception.
		""")
	void incorrectArguments(
		String desc,
		String arg,
		String expectedErrorMessage
	) {
    // GIVEN
    Executable executable = () -> new ${1}(arg);

    // WHEN
    var actual = assertThrows(IllegalArgumentException.class, executable, desc);

    // THEN
    assertThat(actual).extracting(Exception::getMessage).isEqualTo(expectedErrorMessage);
	}

	private static Stream<Arguments> invalidArgumentsProvider() {
		return Stream.of(
			Arguments.of(
				"null ${3}",
				null,
				"${3} is mandatory"
			)
		);
	}

snippet ae
	assertThat(${1:actual}).isEqualTo(${2:expected});

snippet at
	assertThat(${1:actual}).isTrue();

snippet af
	assertThat(${1:actual}).isFalse();

